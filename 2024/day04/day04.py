from collections import namedtuple

test_input = """MMMSXXMASM
MSAMXMSMSA
AMXSXMAAMM
MSAMASMSMX
XMASAMXAMM
XXAMMXXAMA
SMSMSASXSS
SAXAMASAAA
MAMMMXMMMM
MXMXAXMASX
"""

def parse_input(s):
    return s.splitlines()

def run_part1(i):
    found = search_all(i, "XMAS")
    print(len(list(found)))

Point = namedtuple("Coord", ("x", "y"))

Dirs = [
    Point(-1, -1),
    Point(0, -1),
    Point(1, -1),
    Point(-1, 0),
    Point(1, 0),
    Point(-1, 1),
    Point(0, 1),
    Point(1, 1),
]

def add(a, b):
    return Point(a.x + b.x, a.y + b.y)

def lookup(grid, p):
    if 0 <= p.y < len(grid) and 0 <= p.x < len(grid[0]):
        return grid[p.y][p.x]
    return None

def search(grid, pos, d, word):
    for c in word:
        if lookup(grid, pos) != c:
            return False
        pos = add(pos, d)
    return True

def search_all(grid, word):
    return (
        Point(x, y)
        for y, row in enumerate(grid)
        for x in range(len(row))
        for d in Dirs
        if search(grid, Point(x, y), d, word)
    )

def run_part2(i):
    print(len(list(search_all_x(i))))

def search_x(grid, pos):
    if lookup(grid, pos) != "A":
        return False
    forward = lookup(grid, add(pos, Point(-1, -1))) + lookup(grid, add(pos, Point(1, 1)))
    back = lookup(grid, add(pos, Point(-1, 1))) + lookup(grid, add(pos, Point(1, -1)))
    return forward in ("MS", "SM") and back in ("MS", "SM")

def search_all_x(grid):
    return (
        Point(x, y)
        for y in range(1, len(grid) - 1)
        for x in range(1, len(grid[0]) - 1)
        if search_x(grid, Point(x, y))
    )

### Generated by start script

def test_part1():
    run_part1(parse_input(test_input))

def part1():
    run_part1(parse_input(open("input.txt").read()))

def test_part2():
    run_part2(parse_input(test_input))

def part2():
    run_part2(parse_input(open("input.txt").read()))

def main():
    print("=== running part 1 test ===")
    test_part1()
    print("=== running part 1 ===")
    part1()
    print("=== running part 2 test ===")
    test_part2()
    print("=== running part 2 ===")
    part2()
    print("=== ===")

if __name__ == "__main__":
    main()
