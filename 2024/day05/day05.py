from collections import defaultdict

test_input = """47|53
97|13
97|61
97|47
75|29
61|13
75|53
29|13
97|29
53|29
61|53
97|53
61|29
47|13
75|47
97|75
47|61
75|61
47|29
75|13
53|13

75,47,61,53,29
97,61,53,29,13
75,29,13
75,97,47,61,53
61,13,29
97,13,75,29,47
"""

def parse_input(s):
    a, b = s.split("\n\n", 1)
    rules = tuple(tuple(map(int, l.split("|"))) for l in a.splitlines())
    pages = tuple(tuple(map(int, l.split(","))) for l in b.splitlines())
    return rules, pages

def run_part1(i):
    rules, pages = i
    s = sum(p[len(p)//2] for p in pages if is_page_ok(p, rules))
    print(s)

def is_page_ok(page, rules):
    lookup = {c: i for i, c in enumerate(page)}
    for r in rules:
        if r[0] not in lookup or r[1] not in lookup:
            continue
        if lookup[r[1]] < lookup[r[0]]:
            return False
    return True

def run_part2(i):
    rules, pages = i
    reordered = [reorder_page(p, rules) for p in pages if not is_page_ok(p, rules)]
    s = sum(p[len(p)//2] for p in reordered)
    print(s)

def reorder_page(page, rules):
    lookup = {c: i for i, c in enumerate(page)}
    counts = defaultdict(int)
    for r in rules:
        if r[0] not in lookup or r[1] not in lookup:
            continue
        counts[r[0]] += 1
    return sorted(page, key=lambda c: counts[c], reverse=True)

### Generated by start script

def test_part1():
    run_part1(parse_input(test_input))

def part1():
    run_part1(parse_input(open("input.txt").read()))

def test_part2():
    run_part2(parse_input(test_input))

def part2():
    run_part2(parse_input(open("input.txt").read()))

def main():
    print("=== running part 1 test ===")
    test_part1()
    print("=== running part 1 ===")
    part1()
    print("=== running part 2 test ===")
    test_part2()
    print("=== running part 2 ===")
    part2()
    print("=== ===")

if __name__ == "__main__":
    main()
