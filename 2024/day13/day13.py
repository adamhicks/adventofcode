import math
import re
from collections import namedtuple

test_input = """Button A: X+94, Y+34
Button B: X+22, Y+67
Prize: X=8400, Y=5400

Button A: X+26, Y+66
Button B: X+67, Y+21
Prize: X=12748, Y=12176

Button A: X+17, Y+86
Button B: X+84, Y+37
Prize: X=7870, Y=6450

Button A: X+69, Y+23
Button B: X+27, Y+71
Prize: X=18641, Y=10279
"""

Puzzle = namedtuple("Puzzle", ["ax", "ay", "bx", "by", "px", "py"])

def parse_input(s):
    match = re.compile(r"Button A: X\+(\d+), Y\+(\d+)\nButton B: X\+(\d+), Y\+(\d+)\nPrize: X=(\d+), Y=(\d+)", re.M)
    return tuple(Puzzle(*map(int, m.groups())) for m in re.finditer(match, s))

def run_part1(i):
    sols = list(solve_puzzle(p) for p in i)
    s = sum(3*sol[0] + sol[1] for sol in sols if sol is not None and max(sol) <= 100)
    print(s)

def solve_puzzle(p):
    bx, px = p.bx * p.ay, p.px * p.ay
    by, py = p.by * p.ax, p.py * p.ax

    b_count = (px - py) // (bx - by)
    if (px - py) % (bx - by) != 0:
        return None

    a_count = (p.px - (p.bx * b_count)) // p.ax
    return a_count, b_count

high = 10000000000000

def run_part2(i):
    sols = list(solve_puzzle(p._replace(px=p.px+high, py=p.py+high)) for p in i)
    s = sum(3*sol[0] + sol[1] for sol in sols if sol is not None)
    print(s)

### Generated by start script

def test_part1():
    run_part1(parse_input(test_input))

def part1():
    run_part1(parse_input(open("input.txt").read()))

def test_part2():
    run_part2(parse_input(test_input))

def part2():
    run_part2(parse_input(open("input.txt").read()))

def main():
    print("=== running part 1 test ===")
    test_part1()
    print("=== running part 1 ===")
    part1()
    print("=== running part 2 test ===")
    test_part2()
    print("=== running part 2 ===")
    part2()
    print("=== ===")

if __name__ == "__main__":
    main()
