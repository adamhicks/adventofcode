from collections import defaultdict, namedtuple

test_input = """89010123
78121874
87430965
96549874
45678903
32019012
01329801
10456732
"""

def parse_input(s):
    return s.splitlines()

Point = namedtuple("Point", ["x", "y"])

def trailheads(topo):
    return tuple(
        Point(x, y)
        for y, row in enumerate(topo)
        for x, c in enumerate(row)
        if c == '0'
    )

Dirs = (
    Point(0, -1),
    Point(1, 0),
    Point(0, 1),
    Point(-1, 0)
)

def add(a, b):
    return Point(a.x + b.x, a.y + b.y)

def neighbours(p):
    return (add(p, d) for d in Dirs)

def in_range(n, s):
    return 0 <= n.x < s.x and 0 <= n.y < s.y

def run_part1(i):
    size = Point(len(i[0]), len(i))
    nodes = {h: {h} for h in trailheads(i)}
    for height in range(1, 10):
        nh = defaultdict(set)
        for n, heads in nodes.items():
            for p in neighbours(n):
                if in_range(p, size) and int(i[p.y][p.x]) == height:
                    nh[p].update(heads)
        nodes = nh
    print(sum(len(v) for v in nodes.values()))

def run_part2(i):
    size = Point(len(i[0]), len(i))
    nodes = {h: 1 for h in trailheads(i)}
    for height in range(1, 10):
        nh = defaultdict(int)
        for n, heads in nodes.items():
            for p in neighbours(n):
                if in_range(p, size) and int(i[p.y][p.x]) == height:
                    nh[p] += heads
        nodes = nh
    print(sum(v for v in nodes.values()))

### Generated by start script

def test_part1():
    run_part1(parse_input(test_input))

def part1():
    run_part1(parse_input(open("input.txt").read()))

def test_part2():
    run_part2(parse_input(test_input))

def part2():
    run_part2(parse_input(open("input.txt").read()))

def main():
    print("=== running part 1 test ===")
    test_part1()
    print("=== running part 1 ===")
    part1()
    print("=== running part 2 test ===")
    test_part2()
    print("=== running part 2 ===")
    part2()
    print("=== ===")

if __name__ == "__main__":
    main()
