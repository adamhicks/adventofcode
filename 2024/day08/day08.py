import math
from collections import namedtuple, defaultdict
from itertools import combinations

test_input = """............
........0...
.....0......
.......0....
....0.......
......A.....
............
............
........A...
.........A..
............
............
"""

Point = namedtuple("Point", ["x", "y"])

def is_antenna(c):
    return ord('0') <= ord(c) <= ord('9') or ord('a') <= ord(c) <= ord('z') or ord('A') <= ord(c) <= ord('Z')

def in_range(p, s):
    return 0 <= p.x < s.x and 0 <= p.y < s.y

def parse_input(s):
    lines = s.splitlines()
    return {
        Point(x, y): c
        for y, line in enumerate(lines)
        for x, c in enumerate(line) if is_antenna(c)
    }, Point(len(lines[0]), len(lines))

def run_part1(i):
    nodes, size = i

    groups = defaultdict(list)
    for p, c in nodes.items():
        groups[c].append(p)

    antis = set()
    for c, nodes in groups.items():
        for a, b in combinations(nodes, 2):
            a1, a2 = anti_nodes(a, b)
            antis.add(a1)
            antis.add(a2)
    print(sum(1 for n in antis if in_range(n, size)))

def anti_nodes(a, b):
    r1 = Point(a.x + (a.x - b.x), a.y + (a.y - b.y))
    r2 = Point(b.x + (b.x - a.x), b.y + (b.y - a.y))
    return r1, r2

def run_part2(i):
    nodes, size = i

    groups = defaultdict(list)
    for p, c in nodes.items():
        groups[c].append(p)

    antis = set()
    for c, nodes in groups.items():
        for a, b in combinations(nodes, 2):
            for n in anti_nodes_all(a, b, size):
                antis.add(n)
    print(len(antis))

def add(a, b):
    return Point(a.x+b.x, a.y+b.y)

def sub(a, b):
    return Point(a.x-b.x, a.y-b.y)

def simplify(a):
    n = math.gcd(a.x, a.y)
    return Point(a.x//n, a.y//n)

def anti_nodes_all(a, b, s):
    v = simplify(Point(b.x-a.x, b.y-a.y))
    while in_range(a, s):
        yield a
        a = sub(a, v)
    while in_range(b, s):
        yield b
        b = add(b, v)

### Generated by start script

def test_part1():
    run_part1(parse_input(test_input))

def part1():
    run_part1(parse_input(open("input.txt").read()))

def test_part2():
    run_part2(parse_input(test_input))

def part2():
    run_part2(parse_input(open("input.txt").read()))

def main():
    print("=== running part 1 test ===")
    test_part1()
    print("=== running part 1 ===")
    part1()
    print("=== running part 2 test ===")
    test_part2()
    print("=== running part 2 ===")
    part2()
    print("=== ===")

if __name__ == "__main__":
    main()
