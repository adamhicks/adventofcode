from collections import namedtuple

test_input = """5,4
4,2
4,5
3,0
2,1
6,3
2,4
1,5
0,6
3,3
2,6
5,1
1,2
5,5
2,5
6,5
1,4
0,4
6,4
1,1
6,1
1,0
0,5
1,6
2,0
"""

Point = namedtuple("Point", ["x", "y"])

Dirs = (
    Point(0, -1),
    Point(1, 0),
    Point(0, 1),
    Point(-1, 0),
)

def parse_input(s):
    return tuple(Point(*map(int, l.split(","))) for l in s.splitlines())

def run_part1(i, size, upto):
    blocked = set(i[:upto])
    r = search_route(blocked, size)
    print(len(r)-1)

def in_bounds(p, size):
    return 0 <= p.x <= size and 0 <= p.y <= size

def add(a, b):
    return Point(a.x+b.x, a.y+b.y)

def search_route(blocked, size):
    start, end = Point(0, 0), Point(size, size)
    paths = [(start,)]
    done = set()
    while paths:
        np = []
        for p in paths:
            cur = p[-1]
            if cur == end:
                return p
            for d in Dirs:
                to = add(cur, d)
                if in_bounds(to, size) and to not in done and to not in blocked:
                    np.append(p + (to,))
                    done.add(to)
        paths = np
    return None


def run_part2(i, size):
    b = find_block(i, size)
    print(f"{b.x},{b.y}")

def find_block(i, size):
    blocked = set()
    r = search_route(blocked, size)
    path = set(r)
    for b in i:
        blocked.add(b)
        if b in path:
            r = search_route(blocked, size)
            if r is None:
                return b
            path = set(r)
    return None

### Generated by start script

def test_part1():
    run_part1(parse_input(test_input), 6, 12)

def part1():
    run_part1(parse_input(open("input.txt").read()), 70, 1024)

def test_part2():
    run_part2(parse_input(test_input), 6)

def part2():
    run_part2(parse_input(open("input.txt").read()), 70)

def main():
    print("=== running part 1 test ===")
    test_part1()
    print("=== running part 1 ===")
    part1()
    print("=== running part 2 test ===")
    test_part2()
    print("=== running part 2 ===")
    part2()
    print("=== ===")

if __name__ == "__main__":
    main()
