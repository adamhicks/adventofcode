import heapq

test_input = """r, wr, b, g, bwu, rb, gb, br

brwrr
bggr
gbbr
rrbgbr
ubwu
bwurrg
brgr
bbrgwb
"""

def parse_input(s):
    a, b = s.split("\n\n")
    return a.split(", "), b.splitlines()

def run_part1(i):
    towels, patterns = i
    s = sum(1 for p in patterns if pattern_possible(p, towels) > 0)
    print(s)

def pattern_possible(p, towels):
    memo = {p: 1}
    q = [(0, p)]
    heapq.heapify(q)
    while q:
        _, left = heapq.heappop(q)
        amt = memo[left]
        for t in towels:
            if left.startswith(t):
                s = left[len(t):]
                if s not in memo:
                    memo[s] = amt
                    heapq.heappush(q, (len(p) - len(s), s))
                else:
                    memo[s] += amt
    return memo.get("", 0)

def run_part2(i):
    towels, patterns = i
    s = sum(pattern_possible(p, towels) for p in patterns)
    print(s)

### Generated by start script

def test_part1():
    run_part1(parse_input(test_input))

def part1():
    run_part1(parse_input(open("input.txt").read()))

def test_part2():
    run_part2(parse_input(test_input))

def part2():
    run_part2(parse_input(open("input.txt").read()))

def main():
    print("=== running part 1 test ===")
    test_part1()
    print("=== running part 1 ===")
    part1()
    print("=== running part 2 test ===")
    test_part2()
    print("=== running part 2 ===")
    part2()
    print("=== ===")

if __name__ == "__main__":
    main()
