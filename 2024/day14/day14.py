import re
from collections import namedtuple, defaultdict
from functools import reduce

test_input = """p=0,4 v=3,-3
p=6,3 v=-1,-3
p=10,3 v=-1,2
p=2,0 v=2,-1
p=0,0 v=1,3
p=3,0 v=-2,-2
p=7,6 v=-1,-3
p=3,0 v=-1,-2
p=9,3 v=2,3
p=7,3 v=-1,2
p=2,4 v=2,-3
p=9,5 v=-3,-3
"""

Point = namedtuple("Point", ["x", "y"])

def parse_input(s):
    lines = (
        tuple(map(int, m.groups()))
        for m in re.finditer(r"p=(.*),(.*) v=(.*),(.*)", s)
    )
    return tuple((Point(a[0], a[1]), Point(a[2], a[3])) for a in lines)

def run_part1(i, bounds):
    bots = tuple(move_bot(p, v, 100, bounds) for p, v in i)
    quad_counts = defaultdict(int)
    for p, _ in bots:
        q = quad(p, bounds)
        if q is None:
            continue
        quad_counts[q] += 1

    s = reduce(lambda a, n: a * n, quad_counts.values())
    print(s)

def quad(p, bounds):
    col = bounds.x // 2
    row = bounds.y // 2
    if p.x == col or p.y == row:
        return None
    return p.x < col, p.y < row

def move_bot(p, v, steps, bounds):
    x = (p.x + (v.x * steps)) % bounds.x
    y = (p.y + (v.y * steps)) % bounds.y
    return Point(x, y), v

def treelike(bots):
    i = 0
    for bot in bots:
        if Point(bot.x-1, bot.y+1) in bots or Point(bot.x+1, bot.y+1) in bots:
            i += 1
    return i > 200

def print_bots(bots, bounds):
    for y in range(bounds.y):
        row = ""
        for x in range(bounds.x):
            if Point(x, y) in bots:
                row += "X"
            else:
                row += " "
        print(row)

def run_part2(i, bounds):
    bots = i
    s = 0
    while True:
        bot_ps = set(p for p, _ in bots)
        if treelike(bot_ps):
            break
        s += 1
        bots = tuple(move_bot(p, v, 1, bounds) for p, v in bots)

    print_bots(bot_ps, bounds)
    print()
    print(s)
    print()

### Generated by start script

def test_part1():
    run_part1(parse_input(test_input), Point(7, 11))

def part1():
    run_part1(parse_input(open("input.txt").read()), Point(101, 103))

def test_part2():
    run_part2(parse_input(test_input), Point(7, 11))

def part2():
    run_part2(parse_input(open("input.txt").read()), Point(101, 103))

def main():
    print("=== running part 1 test ===")
    test_part1()
    print("=== running part 1 ===")
    part1()
    print("=== running part 2 test ===")
    # test_part2()
    print("=== running part 2 ===")
    part2()
    print("=== ===")

if __name__ == "__main__":
    main()
