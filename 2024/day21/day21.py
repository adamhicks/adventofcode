from collections import namedtuple, defaultdict
from itertools import pairwise

test_input = """029A
980A
179A
456A
379A
"""

def parse_input(s):
    return s.splitlines()

dpad = (
    (None, "^", "A"),
    ("<", "v", ">"),
)

numpad = (
    ("7", "8", "9"),
    ("4", "5", "6"),
    ("1", "2", "3"),
    (None, "0", "A"),
)

Point = namedtuple("Point", ["x", "y"])

North = Point(0, -1)
East = Point(1, 0)
South = Point(0, 1)
West = Point(-1, 0)

def add(a, b):
    return Point(a.x + b.x, a.y + b.y)

def find(pad, c):
    return next(
        Point(x, y)
        for y, row in enumerate(pad)
        for x, v in enumerate(row)
        if v == c
    )

def in_range(pad, p):
    return 0 <= p.y < len(pad) and 0 <= p.x < len(pad[0])

def navigate(pad, a, b):
    fro = find(pad, a)
    to = find(pad, b)
    gap = find(pad, None)

    up_downs = ("v" if to.y > fro.y else "^") * abs(to.y - fro.y)
    left_rights = (">" if to.x > fro.x else "<") * abs(to.x - fro.x)

    if to.x > fro.x and Point(fro.x, to.y) != gap:
        return up_downs + left_rights + "A"
    if Point(to.x, fro.y) != gap:
        return left_rights + up_downs + "A"
    return up_downs + left_rights + "A"

def run_part1(i):
    pads = (numpad, dpad, dpad)
    s = sum(len(get_instr(pads, code)) * int(code[:-1]) for code in i)
    print(s)

def get_instr(pads, code):
    instr = code
    for p in pads:
        instr = enter_code(p, instr)
    return instr

def enter_code(pad, code):
    state = "A"
    instr = ""
    for c in code:
        instr += navigate(pad, state, c)
        state = c
    return instr

def sequences(seq):
    counts = defaultdict(int)
    for f, t in pairwise("A" + seq):
        counts[navigate(dpad, f, t)] += 1
    return counts

def instructions(code, bots=2):
    ds = ("<", ">", "^", "v", "A")
    seq = {navigate(dpad, f, t) for t in ds for f in ds}

    seq_next = {s: sequences(s) for s in seq}
    counts = sequences(enter_code(numpad, code))

    for _ in range(bots-1):
        nc = defaultdict(int)
        for seq, c in counts.items():
            for ns, c2 in seq_next[seq].items():
                nc[ns] += c * c2
        counts = nc

    return sum(len(s) * c for s, c in counts.items())

def run_part2(i):
    s = sum(instructions(code, 25) * int(code[:-1]) for code in i)
    print(s)

### Generated by start script

def test_part1():
    run_part1(parse_input(test_input))

def part1():
    run_part1(parse_input(open("input.txt").read()))

def test_part2():
    run_part2(parse_input(test_input))

def part2():
    run_part2(parse_input(open("input.txt").read()))

def main():
    print("=== running part 1 test ===")
    test_part1()
    print("=== running part 1 ===")
    part1()
    print("=== running part 2 test ===")
    test_part2()
    print("=== running part 2 ===")
    part2()
    print("=== ===")

if __name__ == "__main__":
    main()
