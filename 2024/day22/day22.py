from collections import defaultdict
from itertools import pairwise

test_input = """1
10
100
2024
"""

def parse_input(s):
    return map(int, s.splitlines())

p = 16777216

def next_hash(i):
    i ^= i * 64
    i %= p
    i ^= i // 32
    i %= p
    i ^= i * 2048
    i %= p
    return i

def run_hash(i, n=2000):
    for _ in range(n):
        i = next_hash(i)
    return i

def run_part1(i):
    print(sum(run_hash(v) for v in i))

def prices(i, n=2000):
    for _ in range(n):
        yield i % 10
        i = next_hash(i)
    yield i % 10

def sequences(i, n=2000):
    l = list(prices(i, n))
    seq_price = dict()
    for i in range(0, len(l)-4):
        ps = tuple(b-a for a, b in pairwise(l[i:i+5]))
        if ps in seq_price:
            continue
        seq_price[ps] = l[i+4]
    return seq_price

test_input2 = """1
2
3
2024
"""

def run_part2(i):
    seq = defaultdict(int)
    for s in i:
        ps = sequences(s)
        for k, v in ps.items():
            seq[k] += v
    print(max(seq.values()))

### Generated by start script

def test_part1():
    run_part1(parse_input(test_input))

def part1():
    run_part1(parse_input(open("input.txt").read()))

def test_part2():
    run_part2(parse_input(test_input2))

def part2():
    run_part2(parse_input(open("input.txt").read()))

def main():
    print("=== running part 1 test ===")
    test_part1()
    print("=== running part 1 ===")
    part1()
    print("=== running part 2 test ===")
    test_part2()
    print("=== running part 2 ===")
    part2()
    print("=== ===")

if __name__ == "__main__":
    main()
