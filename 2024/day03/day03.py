import re

test_input = """xmul(2,4)%&mul[3,7]!@^do_not_mul(5,5)+mul(32,64]then(mul(11,8)mul(8,5))"""

def parse_input(s):
    return s

mul_re = re.compile(r"mul\((\d+),(\d+)\)")

test_input2 = """xmul(2,4)&mul[3,7]!^don't()_mul(5,5)+mul(32,64](mul(11,8)undo()?mul(8,5))"""

def run_part1(i):
    print(sum(int(m[0]) * int(m[1]) for m in mul_re.findall(i)))

do_mul_re = re.compile(r"(do(n't)?)|(mul\((\d+),(\d+)\))")

def run_part2(i):
    enable = True
    summ = 0
    for m in do_mul_re.findall(i):
        if m[0] == "do":
            enable = True
        elif m[0] == "don't":
            enable = False
        elif enable:
            summ += int(m[3]) * int(m[4])
    print(summ)

### Generated by start script

def test_part1():
    run_part1(parse_input(test_input))

def part1():
    run_part1(parse_input(open("input.txt").read()))

def test_part2():
    run_part2(parse_input(test_input2))

def part2():
    run_part2(parse_input(open("input.txt").read()))

def main():
    print("=== running part 1 test ===")
    test_part1()
    print("=== running part 1 ===")
    part1()
    print("=== running part 2 test ===")
    test_part2()
    print("=== running part 2 ===")
    part2()
    print("=== ===")

if __name__ == "__main__":
    main()
