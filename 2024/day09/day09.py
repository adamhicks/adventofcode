from collections import namedtuple, deque

test_input = """2333133121414131402
"""

def parse_input(s):
    return tuple(map(int, s.strip()))

File = namedtuple("File", ["size", "id", "is_space"])

def eat_end(files):
    if not files:
        return None
    last = files.pop()
    if last.size > 1:
        files.append(File(last.size-1, last.id, last.is_space))
    elif files:
        files.pop() # ditch the space
    return last

def run_part1(i):
    files = deque(
        File(s, idx//2, idx%2 == 1)
        for idx, s in enumerate(i)
    )
    idx = 0
    hashsum = 0
    while files:
        f = files.popleft()
        for _ in range(f.size):
            hashsum += idx * f.id
            idx += 1
        if not files:
            break
        spc = files.popleft()
        for _ in range(spc.size):
            last = eat_end(files)
            if last is None:
                break
            hashsum += idx * last.id
            idx += 1
    print(hashsum)

def run_part2(i):
    files = deque(
        File(s, idx//2, idx%2 == 1)
        for idx, s in enumerate(i)
    )
    idx = 0
    hashsum = 0
    while files:
        f = files.popleft()
        if f.is_space:
            spc = f.size
            while spc > 0:
                last = find_file(files, spc)
                if last is None:
                    idx += spc
                    break
                spc -= last.size
                for _ in range(last.size):
                    hashsum += idx * last.id
                    idx += 1
        else:
            for _ in range(f.size):
                hashsum += idx * f.id
                idx += 1

    print(hashsum)

def find_file(files, max_size):
    for i in range(len(files)-1, -1, -1):
        f = files[i]
        if not f.is_space and f.size <= max_size:
            files[i] = File(f.size, 0, True)
            return f
    return None

### Generated by start script

def test_part1():
    run_part1(parse_input(test_input))

def part1():
    run_part1(parse_input(open("input.txt").read()))

def test_part2():
    run_part2(parse_input(test_input))

def part2():
    run_part2(parse_input(open("input.txt").read()))

def main():
    print("=== running part 1 test ===")
    test_part1()
    print("=== running part 1 ===")
    part1()
    print("=== running part 2 test ===")
    test_part2()
    print("=== running part 2 ===")
    part2()
    print("=== ===")

if __name__ == "__main__":
    main()
